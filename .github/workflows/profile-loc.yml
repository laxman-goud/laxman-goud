name: Update Profile LOC Metrics

on:
  schedule:
    - cron: "0 0 * * *"   # every midnight (UTC)
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-loc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout profile repo
        uses: actions/checkout@v3

      - name: Install utilities and tokei (prebuilt)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl tar git
          # Download a prebuilt tokei binary (adjust version if needed)
          curl -L "https://github.com/XAMPPRocky/tokei/releases/download/v12.1.2/tokei-x86_64-unknown-linux-gnu.tar.gz" -o tokei.tar.gz
          tar -xzf tokei.tar.gz
          sudo mv tokei /usr/local/bin/
          tokei --version

      - name: Fetch repo list (public) or use PAT if provided
        env:
          PROFILE_PAT: ${{ secrets.PROFILE_LOC_PAT }}   # optional, set if you want private repos included
          GITHUB_USER: "laxman-goud"
        run: |
          # If PROFILE_LOC_PAT secret exists, use authenticated endpoint (includes private repos the token has access to)
          if [ -n "$PROFILE_PAT" ]; then
            echo "Using PROFILE_LOC_PAT to fetch repos (private included if token has scope)."
            curl -s -H "Authorization: token $PROFILE_PAT" "https://api.github.com/user/repos?per_page=100" | jq -r '.[].ssh_url' > repo_urls.txt
          else
            echo "Fetching public repos for $GITHUB_USER"
            curl -s "https://api.github.com/users/$GITHUB_USER/repos?per_page=100" | jq -r '.[].ssh_url' > repo_urls.txt
          fi

          # clone repos shallow
          mkdir repos
          cd repos
          while read repo; do
            if [ -n "$repo" ]; then
              git clone --depth 1 "$repo" || echo "clone failed: $repo"
            fi
          done < ../repo_urls.txt

      - name: Count LOC for each repo
        run: |
          cd repos
          > ../loc_summary.txt
          total=0
          for dir in */; do
            # skip if not a directory
            [ -d "$dir" ] || continue
            # count LOC with tokei
            loc=$(tokei "$dir" -o json | jq '.Total.code // 0')
            repo_name=${dir%/}
            echo "$repo_name: $loc" >> ../loc_summary.txt
            total=$((total + loc))
          done
          echo "TOTAL_LOC=$total" >> $GITHUB_ENV
          sort -t: -k2,2nr ../loc_summary.txt | head -n 5 > ../top_repos.txt

      - name: Update README.md placeholders
        run: |
          TOTAL_LOC=${{ env.TOTAL_LOC }}
          echo "Total LOC computed: $TOTAL_LOC"
          # prefix top repos lines with "- "
          sed 's/^/- /' top_repos.txt > top_repos_md.txt

          # replace TOTAL_LOC placeholder
          sed -i "s|<!--TOTAL_LOC-->|$TOTAL_LOC|g" README.md

          # replace TOP_REPOS_LOC placeholder with the block of top repos
          awk -v replfile="top_repos_md.txt" '{
            if($0=="<!--TOP_REPOS_LOC-->"){
              while((getline line < replfile) > 0) print line;
              next
            }
            print
          }' README.md > README.tmp && mv README.tmp README.md

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add README.md
          git commit -m "chore: update total LOC metrics [skip ci]" || echo "No changes to commit"
          git push
